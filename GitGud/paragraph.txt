LibGDX is a multiplatform framework for the development of 2D or 3D games in Java, targeting iOS, Android, Desktop, WebGL, Blackberry and other platforms. Various parts of the framework incorporate accelerated native C binaries where available and applicable, thereby offering a very worthy tradeoff between ease-of-development and efficiency-of-execution. 

I am a huge fan of the framework and use it for the majority of my personal projects, but have unfortunately been unable to apply this knowledge to any coursework so far due to the classes' explicit requirement that I not. It may be worth noting that LibGDX is somewhat outside the public eye in terms of game-making frameworks. This is in part due to the relative dearth of mainstream games  produced with it, and no doubt in part due to the general stigma against Java as a development tool.

The LibGDX project is organized and overseen by Badlogic Games, and is licensed under the Apache 2.0 Open Source license. The project is open-source, and purportedly "maintained by the community". A brief perusal of the repository history on GitHub reveals this claim to be only somewhat true. While the vast majority of code and commits originate within the internal BadLogic/LibGDX organization, there are a fair number of quality-of-life and feature-positive pull requests accepted by the BadLogic team. A more accurate statement might be: ``90\% maintained by three or four highly dedicated and knowledgeable individuals, 10\% maintained by the community''. 

This is probably partly owed to how changes to the project are made and accepted; the LibGDX organization collaborators appear able to commit directly to master, whereas community-driven changes must be initiated through a repository fork. In either case, pull requests are tested by two automated build processes, an internal Jenkins builder and a Travis build tool. It is apparent from this behavior that the LibGDX team have an internal vision for the direction of the project, and that they exercise their authority as controllers of the repository to selectively include community-driven changes.